#!/usr/bin/env bash

[ -n "${PKENV_DEBUG}" ] && set -x
source ${PKENV_ROOT}/libexec/helpers

[ "${#}" -gt 1 ] && error_and_die "usage: pkenv install [<version>]"

declare version_requested version regex

get_version_requested ${1}

if [[ "${version_requested}" =~ ^latest\:.*$ ]]; then
  version="${version_requested%%\:*}"
  regex="${version_requested##*\:}"
elif [[ "${version_requested}" =~ ^latest$ ]]; then
  version="${version_requested}"
  regex="^[0-9]\+\.[0-9]\+\.[0-9]\+$"
else
  version="${version_requested}"
  regex="^${version_requested}$"
fi

[ -n "${version}" ] || error_and_die "Version is not specified"
version="$(pkenv-list-remote | grep -e "${regex}" | tail -n 1)"
[ -n "${version}" ] || error_and_die "No versions matching '${1}' found in remote"

dst_path="${PKENV_ROOT}/versions/${version}"
if [ -f "${dst_path}/packer" ]; then
  echo "Packer v${version} is already installed"
  exit 0
fi

PKENV_ARCH=${PKENV_ARCH:-amd64}
case "$(uname -s)" in
  Darwin*)
    os="darwin_${PKENV_ARCH}"
    ;;
  MINGW64*)
    os="windows_${PKENV_ARCH}"
    ;;
  MSYS_NT*)
    os="windows_${PKENV_ARCH}"
    ;;
  CYGWIN_NT*)
    os="windows_${PKENV_ARCH}"
    ;;
  *)
    os="linux_${PKENV_ARCH}"
    ;;
esac

keybase_bin="$(command -v keybase 2>/dev/null)"
shasum_bin="$(command -v shasum 2>/dev/null)"

version_url="https://releases.hashicorp.com/packer/${version}"
tarball_name="packer_${version}_${os}.zip"
shasums_name="packer_${version}_SHA256SUMS"

info "Installing Packer v${version}"

# Create a local temporary directory for downloads
download_tmp="$(mktemp -d pkenv_download.XXXXXX)" || error_and_die "Unable to create temporary download directory in $(pwd)"
# Clean it up in case of error
trap "rm -rf ${download_tmp}" EXIT;

info "Downloading release tarball from ${version_url}/${tarball_name}"
curlw -# -f -o "${download_tmp}/${tarball_name}" "${version_url}/${tarball_name}" || error_and_die "Tarball download failed"
info "Downloading SHA hash file from ${version_url}/${shasums_name}"
curlw -s -f -o "${download_tmp}/${shasums_name}" "${version_url}/${shasums_name}" || error_and_die "SHA256 hashes download failed"

download_signature() {
  info "Downloading SHA hash signature file from ${version_url}/${shasums_name}.sig"
  curlw -s -f \
    -o "${download_tmp}/${shasums_name}.sig" \
    "${version_url}/${shasums_name}.sig" \
    || error_and_die "SHA256SUMS signature download failed"
}

# Verify signature if verification mechanism (keybase, gpg, etc) is present
if [[ -n "${keybase_bin}" && -x "${keybase_bin}" ]]; then
  "${keybase_bin}" status | grep -Eq '^Logged in:[[:space:]]*yes'
  keybase_logged_in="${?}"
  "${keybase_bin}" list-following | grep -Fq hashicorp
  keybase_following_hc="${?}"

  if [[ "${keybase_logged_in}" -ne 0 || "${keybase_following_hc}" -ne 0 ]]; then
    warn_and_continue "Unable to verify OpenPGP signature unless logged into keybase and following hashicorp"
  else
    download_signature
    "${keybase_bin}" pgp verify \
      -S hashicorp \
      -d "${download_tmp}/${shasums_name}.sig" \
      -i "${download_tmp}/${shasums_name}" \
      || error_and_die "SHA256SUMS signature does not match!"
  fi

elif [[ -f "${PKENV_ROOT}/use-gnupg" ]]; then
  # GnuPG uses the user's keyring, and any web-of-trust or local signatures or
  # anything else they have setup.  This is the crazy-powerful mode which is
  # overly confusing to newcomers.  We don't support it without the user creating
  # the file use-gnupg, optionally with directives in it.
  gnupg_command="$(sed -E -n -e 's/^binary: *//p' <"${PKENV_ROOT}/use-gnupg")"
  [[ -n "${gnupg_command}" ]] || gnupg_command=gpg

  download_signature
  # Deliberately unquoted command, in case caller has something fancier in "use-gnupg".
  # Also, don't use batch mode.  If someone specifies GnuPG, let them deal with any prompting.
  ${gnupg_command} \
    --verify "${download_tmp}/${shasums_name}.sig" \
    "${download_tmp}/${shasums_name}" \
    || error_and_die "PGP signature rejected by GnuPG"

elif [[ -f "${PKENV_ROOT}/use-gpgv" ]]; then
  # gpgv is a much simpler interface to verification, but does require that the
  # key have been downloaded and marked trusted.
  # We don't force the caller to trust the pkenv repo's copy of their key, they
  # have to choose to make that trust decision.
  gpgv_command="$(sed -E -n -e 's/^binary: *//p' <"${PKENV_ROOT}/use-gpgv")"
  trust_pkenv="$(sed -E -n -e 's/^trust.?pkenv: *//p' <"${PKENV_ROOT}/use-gpgv")"
  [[ -n "${gpgv_command}" ]] || gpgv_command=gpgv

  download_signature
  if [[ "${trust_pkenv}" == "yes" ]]; then
    ${gpgv_command} \
      --keyring "${PKENV_ROOT}/share/hashicorp-keys.pgp" \
      "${download_tmp}/${shasums_name}.sig" \
      "${download_tmp}/${shasums_name}" \
      || error_and_die "PGP signature rejected"
  else
    ${gpgv_command} \
      "${download_tmp}/${shasums_name}.sig" \
      "${download_tmp}/${shasums_name}" \
      || error_and_die "PGP signature rejected"
  fi
else
  # Warning about this avoids an unwarranted sense of confidence in the SHA check
  warn_and_continue "No keybase install found, skipping OpenPGP signature verification"
fi

if [[ -n "${shasum_bin}" && -x "${shasum_bin}" ]]; then
  (
    cd "${download_tmp}"
    "${shasum_bin}" \
      -a 256 \
      -s \
      -c <(grep -F "${tarball_name}" "${shasums_name}") || error_and_die "SHA256 hash does not match!"
  )
else
  # Lack of shasum deserves a proper warning
  warn_and_continue "No shasum tool available. Skipping SHA256 hash validation"
fi

mkdir -p "${dst_path}" || error_and_die "Failed to make directory ${dst_path}"
unzip "${download_tmp}/${tarball_name}" -d "${dst_path}" || error_and_die "Tarball unzip failed"

info "Installation of packer v${version} successful"
pkenv-use "$version"
